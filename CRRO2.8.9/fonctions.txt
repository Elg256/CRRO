import tkinter as tk
from tkinter import messagebox
import random
import hashlib
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.fernet import Fernet
import base64
import pyperclip
from cryptography import *
import threading
from tkinter import ttk, filedialog, messagebox
key_management_window = None
key_access_window = None











def generate_keys():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )
    public_key = private_key.public_key()
    return public_key, private_key

def encrypt1(cle_hex, public_key):
    try :
        public_key = serialization.load_pem_public_key(public_key.encode('utf-8'))
    except Exception as e:
        print ("test")
        open_key_access_window3()
    ciphertext = public_key.encrypt(
        cle_hex.encode('utf-8'),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    cle_hex1 = base64.urlsafe_b64encode(ciphertext).decode('utf-8')
    return cle_hex1


def decrypt1(cle_hex, private_key):
    private_key = serialization.load_pem_private_key(private_key.encode('utf-8'), password=None)
    ciphertext = base64.urlsafe_b64decode(cle_hex.encode('utf-8'))
    plaintext = private_key.decrypt(
        ciphertext,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    cle_hex= plaintext.decode('utf-8')
    return cle_hex







def crypter1():
    cle_publique = champ_clepublique.get().strip()
    message = champ_message.get("1.0", tk.END).strip()
    ciphertext = encrypt(message, cle_publique)
    champ_resultat.delete(0, tk.END)
    champ_resultat.insert(0, ciphertext)

def decrypter1():
    cle_privee = champ_clepriver.get().strip()
    ciphertext = champ_resultat.get().strip()
    message = decrypt(ciphertext, cle_privee)
    champ_message.delete("1.0", tk.END)
    champ_message.insert(tk.END, message)




